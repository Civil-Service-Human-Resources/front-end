/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 303);
/******/ })
/************************************************************************/
/******/ ({

/***/ 17:
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif(!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif(!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///17\n");

/***/ }),

/***/ 303:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(304);\n\n__webpack_require__(305);\n\n__webpack_require__(306);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9hc3NldHMvanMvaWUtc2hpbXMvaW5kZXguanM/ZWMzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4vaHRtbDUtc2hpbSc7XG5pbXBvcnQgJy4vY3NzMy1tZWRpYXF1ZXJpZXMnO1xuaW1wb3J0ICcuL2llJztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvYXNzZXRzL2pzL2llLXNoaW1zL2luZGV4LmpzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///303\n");

/***/ }),

/***/ 304:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * @preserve HTML5 Shiv 3.7.3 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed\n */\n(function (window, document) {\n  /*jshint evil:true */\n  /** version */\n  var version = '3.7.3';\n\n  /** Preset options */\n  var options = window.html5 || {};\n\n  /** Used to skip problem elements */\n  var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;\n\n  /** Not all elements can be cloned in IE **/\n  var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\n\n  /** Detect whether the browser supports default html5 styles */\n  var supportsHtml5Styles;\n\n  /** Name of the expando, to work with multiple documents or to re-shiv one document */\n  var expando = '_html5shiv';\n\n  /** The id for the the documents expando */\n  var expanID = 0;\n\n  /** Cached data for each document */\n  var expandoData = {};\n\n  /** Detect whether the browser supports unknown elements */\n  var supportsUnknownElements;\n\n  (function () {\n    try {\n      var a = document.createElement('a');\n      a.innerHTML = '<xyz></xyz>';\n      //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles\n      supportsHtml5Styles = 'hidden' in a;\n\n      supportsUnknownElements = a.childNodes.length == 1 || function () {\n        // assign a false positive if unable to shiv\n        document.createElement('a');\n        var frag = document.createDocumentFragment();\n        return typeof frag.cloneNode == 'undefined' || typeof frag.createDocumentFragment == 'undefined' || typeof frag.createElement == 'undefined';\n      }();\n    } catch (e) {\n      // assign a false positive if detection fails => unable to shiv\n      supportsHtml5Styles = true;\n      supportsUnknownElements = true;\n    }\n  })();\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a style sheet with the given CSS text and adds it to the document.\n   * @private\n   * @param {Document} ownerDocument The document.\n   * @param {String} cssText The CSS text.\n   * @returns {StyleSheet} The style element.\n   */\n  function addStyleSheet(ownerDocument, cssText) {\n    var p = ownerDocument.createElement('p'),\n        parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;\n\n    p.innerHTML = 'x<style>' + cssText + '</style>';\n    return parent.insertBefore(p.lastChild, parent.firstChild);\n  }\n\n  /**\n   * Returns the value of `html5.elements` as an array.\n   * @private\n   * @returns {Array} An array of shived element node names.\n   */\n  function getElements() {\n    var elements = html5.elements;\n    return typeof elements == 'string' ? elements.split(' ') : elements;\n  }\n\n  /**\n   * Extends the built-in list of html5 elements\n   * @memberOf html5\n   * @param {String|Array} newElements whitespace separated list or array of new element names to shiv\n   * @param {Document} ownerDocument The context document.\n   */\n  function addElements(newElements, ownerDocument) {\n    var elements = html5.elements;\n    if (typeof elements != 'string') {\n      elements = elements.join(' ');\n    }\n    if (typeof newElements != 'string') {\n      newElements = newElements.join(' ');\n    }\n    html5.elements = elements + ' ' + newElements;\n    shivDocument(ownerDocument);\n  }\n\n  /**\n   * Returns the data associated to the given document\n   * @private\n   * @param {Document} ownerDocument The document.\n   * @returns {Object} An object of data.\n   */\n  function getExpandoData(ownerDocument) {\n    var data = expandoData[ownerDocument[expando]];\n    if (!data) {\n      data = {};\n      expanID++;\n      ownerDocument[expando] = expanID;\n      expandoData[expanID] = data;\n    }\n    return data;\n  }\n\n  /**\n   * returns a shived element for the given nodeName and document\n   * @memberOf html5\n   * @param {String} nodeName name of the element\n   * @param {Document|DocumentFragment} ownerDocument The context document.\n   * @returns {Object} The shived element.\n   */\n  function createElement(nodeName, ownerDocument, data) {\n    if (!ownerDocument) {\n      ownerDocument = document;\n    }\n    if (supportsUnknownElements) {\n      return ownerDocument.createElement(nodeName);\n    }\n    if (!data) {\n      data = getExpandoData(ownerDocument);\n    }\n    var node;\n\n    if (data.cache[nodeName]) {\n      node = data.cache[nodeName].cloneNode();\n    } else if (saveClones.test(nodeName)) {\n      node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();\n    } else {\n      node = data.createElem(nodeName);\n    }\n\n    // Avoid adding some elements to fragments in IE < 9 because\n    // * Attributes like `name` or `type` cannot be set/changed once an element\n    //   is inserted into a document/fragment\n    // * Link elements with `src` attributes that are inaccessible, as with\n    //   a 403 response, will cause the tab/window to crash\n    // * Script elements appended to fragments will execute when their `src`\n    //   or `text` property is set\n    return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;\n  }\n\n  /**\n   * returns a shived DocumentFragment for the given document\n   * @memberOf html5\n   * @param {Document} ownerDocument The context document.\n   * @returns {Object} The shived DocumentFragment.\n   */\n  function createDocumentFragment(ownerDocument, data) {\n    if (!ownerDocument) {\n      ownerDocument = document;\n    }\n    if (supportsUnknownElements) {\n      return ownerDocument.createDocumentFragment();\n    }\n    data = data || getExpandoData(ownerDocument);\n    var clone = data.frag.cloneNode(),\n        i = 0,\n        elems = getElements(),\n        l = elems.length;\n    for (; i < l; i++) {\n      clone.createElement(elems[i]);\n    }\n    return clone;\n  }\n\n  /**\n   * Shivs the `createElement` and `createDocumentFragment` methods of the document.\n   * @private\n   * @param {Document|DocumentFragment} ownerDocument The document.\n   * @param {Object} data of the document.\n   */\n  function shivMethods(ownerDocument, data) {\n    if (!data.cache) {\n      data.cache = {};\n      data.createElem = ownerDocument.createElement;\n      data.createFrag = ownerDocument.createDocumentFragment;\n      data.frag = data.createFrag();\n    }\n\n    ownerDocument.createElement = function (nodeName) {\n      //abort shiv\n      if (!html5.shivMethods) {\n        return data.createElem(nodeName);\n      }\n      return createElement(nodeName, ownerDocument, data);\n    };\n\n    ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' + 'var n=f.cloneNode(),c=n.createElement;' + 'h.shivMethods&&(' +\n    // unroll the `createElement` calls\n    getElements().join().replace(/[\\w\\-:]+/g, function (nodeName) {\n      data.createElem(nodeName);\n      data.frag.createElement(nodeName);\n      return 'c(\"' + nodeName + '\")';\n    }) + ');return n}')(html5, data.frag);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Shivs the given document.\n   * @memberOf html5\n   * @param {Document} ownerDocument The document to shiv.\n   * @returns {Document} The shived document.\n   */\n  function shivDocument(ownerDocument) {\n    if (!ownerDocument) {\n      ownerDocument = document;\n    }\n    var data = getExpandoData(ownerDocument);\n\n    if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {\n      data.hasCSS = !!addStyleSheet(ownerDocument,\n      // corrects block display not defined in IE6/7/8/9\n      'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +\n      // adds styling not present in IE6/7/8/9\n      'mark{background:#FF0;color:#000}' +\n      // hides non-rendered elements\n      'template{display:none}');\n    }\n    if (!supportsUnknownElements) {\n      shivMethods(ownerDocument, data);\n    }\n    return ownerDocument;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * The `html5` object is exposed so that more elements can be shived and\n   * existing shiving can be detected on iframes.\n   * @type Object\n   * @example\n   *\n   * // options can be changed before the script is included\n   * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };\n   */\n  var html5 = {\n    /**\n     * An array or space separated string of node names of the elements to shiv.\n     * @memberOf html5\n     * @type Array|String\n     */\n    elements: options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video',\n\n    /**\n     * current version of html5shiv\n     */\n    version: version,\n\n    /**\n     * A flag to indicate that the HTML5 style sheet should be inserted.\n     * @memberOf html5\n     * @type Boolean\n     */\n    shivCSS: options.shivCSS !== false,\n\n    /**\n     * Is equal to true if a browser supports creating unknown/HTML5 elements\n     * @memberOf html5\n     * @type boolean\n     */\n    supportsUnknownElements: supportsUnknownElements,\n\n    /**\n     * A flag to indicate that the document's `createElement` and `createDocumentFragment`\n     * methods should be overwritten.\n     * @memberOf html5\n     * @type Boolean\n     */\n    shivMethods: options.shivMethods !== false,\n\n    /**\n     * A string to describe the type of `html5` object (\"default\" or \"default print\").\n     * @memberOf html5\n     * @type String\n     */\n    type: 'default',\n\n    // shivs the document according to the specified `html5` object options\n    shivDocument: shivDocument,\n\n    //creates a shived element\n    createElement: createElement,\n\n    //creates a shived documentFragment\n    createDocumentFragment: createDocumentFragment,\n\n    //extends list of elements\n    addElements: addElements\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  // expose html5\n  window.html5 = html5;\n\n  // shiv the document\n  shivDocument(document);\n\n  if (( false ? 'undefined' : _typeof(module)) == 'object' && module.exports) {\n    module.exports = html5;\n  }\n})(typeof window !== 'undefined' ? window : undefined, document);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///304\n");

/***/ }),

/***/ 305:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\ncss3-mediaqueries.js - CSS Helper and CSS3 Media Queries Enabler\n\nauthor: Wouter van der Graaf <wouter at dynora nl>\nversion: 1.0 (20110330)\nlicense: MIT\nwebsite: http://code.google.com/p/css3-mediaqueries-js/\n\nW3C spec: http://www.w3.org/TR/css3-mediaqueries/\n\nNote: use of embedded <style> is not recommended when using media queries, because IE  has no way of returning the raw literal css text from a <style> element.\n*/\n\n// true prototypal inheritance (http://javascript.crockford.com/prototypal.html)\nif (typeof Object.create !== 'function') {\n  Object.create = function (o) {\n    function F() {}\n    F.prototype = o;\n    return new F();\n  };\n}\n\n// user agent sniffing shortcuts\nvar ua = {\n  toString: function toString() {\n    return navigator.userAgent;\n  },\n  test: function test(s) {\n    return this.toString().toLowerCase().indexOf(s.toLowerCase()) > -1;\n  }\n};\nua.version = (ua.toString().toLowerCase().match(/[\\s\\S]+(?:rv|it|ra|ie)[\\/: ]([\\d.]+)/) || [])[1];\nua.webkit = ua.test('webkit');\nua.gecko = ua.test('gecko') && !ua.webkit;\nua.opera = ua.test('opera');\nua.ie = ua.test('msie') && !ua.opera;\nua.ie6 = ua.ie && document.compatMode && typeof document.documentElement.style.maxHeight === 'undefined';\nua.ie7 = ua.ie && document.documentElement && typeof document.documentElement.style.maxHeight !== 'undefined' && typeof XDomainRequest === 'undefined';\nua.ie8 = ua.ie && typeof XDomainRequest !== 'undefined';\n\n// initialize when DOM content is loaded\nvar domReady = function () {\n  var fns = [];\n  var init = function init() {\n    if (!arguments.callee.done) {\n      // run init functions once\n      arguments.callee.done = true;\n      for (var i = 0; i < fns.length; i++) {\n        fns[i]();\n      }\n    }\n  };\n\n  // listeners for different browsers\n  if (document.addEventListener) {\n    document.addEventListener('DOMContentLoaded', init, false);\n  }\n  if (ua.ie) {\n    (function () {\n      try {\n        // throws errors until after ondocumentready\n        document.documentElement.doScroll('left');\n\n        // If we are in an iframe, the above does not work properly.\n        // Trying to access the length attribute of document.body, however,\n        // does throw an error until ondocumentready, fixing this issue.\n        document.body.length;\n      } catch (e) {\n        setTimeout(arguments.callee, 50);\n        return;\n      }\n      // no errors, fire\n      init();\n    })();\n    // trying to always fire before onload\n    document.onreadystatechange = function () {\n      if (document.readyState === 'complete') {\n        document.onreadystatechange = null;\n        init();\n      }\n    };\n  }\n  if (ua.webkit && document.readyState) {\n    (function () {\n      if (document.readyState !== 'loading') {\n        init();\n      } else {\n        setTimeout(arguments.callee, 10);\n      }\n    })();\n  }\n  window.onload = init; // fallback\n\n  return function (fn) {\n    // add fn to init functions\n    if (typeof fn === 'function') {\n      // If DOM ready has already been fired, fire the function\n      // right away.\n      if (init.done) {\n        fn();\n      } else {\n        // Add to the queue\n        fns[fns.length] = fn;\n      }\n    }\n    return fn;\n  };\n}();\n\n// helper library for parsing css to objects\nvar cssHelper = function () {\n  var regExp = {\n    BLOCKS: /[^\\s{;][^{;]*\\{(?:[^{}]*\\{[^{}]*\\}[^{}]*|[^{}]*)*\\}/g,\n    BLOCKS_INSIDE: /[^\\s{][^{]*\\{[^{}]*\\}/g,\n    DECLARATIONS: /[a-zA-Z\\-]+[^;]*:[^;]+;/g,\n    RELATIVE_URLS: /url\\(['\"]?([^\\/\\)'\"][^:\\)'\"]+)['\"]?\\)/g,\n    // strip whitespace and comments, @import is evil\n    REDUNDANT_COMPONENTS: /(?:\\/\\*([^*\\\\\\\\]|\\*(?!\\/))+\\*\\/|@import[^;]+;|@-moz-document\\s*url-prefix\\(\\)\\s*{(([^{}])+{([^{}])+}([^{}])+)+})/g,\n    REDUNDANT_WHITESPACE: /\\s*(,|:|;|\\{|\\})\\s*/g,\n    WHITESPACE_IN_PARENTHESES: /\\(\\s*(\\S*)\\s*\\)/g,\n    MORE_WHITESPACE: /\\s{2,}/g,\n    FINAL_SEMICOLONS: /;\\}/g,\n    NOT_WHITESPACE: /\\S+/g\n  };\n\n  var _parsed,\n      parsing = false;\n\n  var waiting = [];\n  var wait = function wait(fn) {\n    if (typeof fn === 'function') {\n      waiting[waiting.length] = fn;\n    }\n  };\n  var ready = function ready() {\n    for (var i = 0; i < waiting.length; i++) {\n      waiting[i](_parsed);\n    }\n  };\n  var events = {};\n  var broadcast = function broadcast(n, v) {\n    if (events[n]) {\n      var listeners = events[n].listeners;\n      if (listeners) {\n        for (var i = 0; i < listeners.length; i++) {\n          listeners[i](v);\n        }\n      }\n    }\n  };\n\n  var requestText = function requestText(url, fnSuccess, fnFailure) {\n    if (ua.ie && !window.XMLHttpRequest) {\n      window.XMLHttpRequest = function () {\n        return new ActiveXObject('Microsoft.XMLHTTP');\n      };\n    }\n    if (!XMLHttpRequest) {\n      return '';\n    }\n    var r = new XMLHttpRequest();\n    try {\n      r.open('get', url, true);\n      r.setRequestHeader('X_REQUESTED_WITH', 'XMLHttpRequest');\n    } catch (e) {\n      fnFailure();\n      return;\n    }\n    var done = false;\n    setTimeout(function () {\n      done = true;\n    }, 5000);\n    document.documentElement.style.cursor = 'progress';\n    r.onreadystatechange = function () {\n      if (r.readyState === 4 && !done) {\n        if (!r.status && location.protocol === 'file:' || r.status >= 200 && r.status < 300 || r.status === 304 || navigator.userAgent.indexOf('Safari') > -1 && typeof r.status === 'undefined') {\n          fnSuccess(r.responseText);\n        } else {\n          fnFailure();\n        }\n        document.documentElement.style.cursor = '';\n        r = null; // avoid memory leaks\n      }\n    };\n    r.send('');\n  };\n\n  var sanitize = function sanitize(text) {\n    text = text.replace(regExp.REDUNDANT_COMPONENTS, '');\n    text = text.replace(regExp.REDUNDANT_WHITESPACE, '$1');\n    text = text.replace(regExp.WHITESPACE_IN_PARENTHESES, '($1)');\n    text = text.replace(regExp.MORE_WHITESPACE, ' ');\n    text = text.replace(regExp.FINAL_SEMICOLONS, '}'); // optional final semicolons\n    return text;\n  };\n\n  var objects = {\n    stylesheet: function stylesheet(el) {\n      var o = {};\n      var amqs = [],\n          mqls = [],\n          rs = [],\n          rsw = [];\n      var s = el.cssHelperText;\n\n      // add attribute media queries\n      var attr = el.getAttribute('media');\n      if (attr) {\n        var qts = attr.toLowerCase().split(',');\n      } else {\n        var qts = ['all']; // imply 'all'\n      }\n      for (var i = 0; i < qts.length; i++) {\n        amqs[amqs.length] = objects.mediaQuery(qts[i], o);\n      }\n\n      // add media query lists and rules (top down order)\n      var blocks = s.match(regExp.BLOCKS); // @charset is not a block\n      if (blocks !== null) {\n        for (var i = 0; i < blocks.length; i++) {\n          if (blocks[i].substring(0, 7) === '@media ') {\n            // media query (list)\n            var mql = objects.mediaQueryList(blocks[i], o);\n            rs = rs.concat(mql.getRules());\n            mqls[mqls.length] = mql;\n          } else {\n            // regular rule set, page context (@page) or font description (@font-face)\n            rs[rs.length] = rsw[rsw.length] = objects.rule(blocks[i], o, null);\n          }\n        }\n      }\n\n      o.element = el;\n      o.getCssText = function () {\n        return s;\n      };\n      o.getAttrMediaQueries = function () {\n        return amqs;\n      };\n      o.getMediaQueryLists = function () {\n        return mqls;\n      };\n      o.getRules = function () {\n        return rs;\n      };\n      o.getRulesWithoutMQ = function () {\n        return rsw;\n      };\n      return o;\n    },\n\n    mediaQueryList: function mediaQueryList(s, stsh) {\n      var o = {};\n      var idx = s.indexOf('{');\n      var lt = s.substring(0, idx);\n      s = s.substring(idx + 1, s.length - 1);\n      var mqs = [],\n          rs = [];\n\n      // add media queries\n      var qts = lt.toLowerCase().substring(7).split(',');\n      for (var i = 0; i < qts.length; i++) {\n        // parse each media query\n        mqs[mqs.length] = objects.mediaQuery(qts[i], o);\n      }\n\n      // add rule sets\n      var rts = s.match(regExp.BLOCKS_INSIDE);\n      if (rts !== null) {\n        for (i = 0; i < rts.length; i++) {\n          rs[rs.length] = objects.rule(rts[i], stsh, o);\n        }\n      }\n\n      o.type = 'mediaQueryList';\n      o.getMediaQueries = function () {\n        return mqs;\n      };\n      o.getRules = function () {\n        return rs;\n      };\n      o.getListText = function () {\n        return lt;\n      };\n      o.getCssText = function () {\n        return s;\n      };\n      return o;\n    },\n\n    mediaQuery: function mediaQuery(s, listOrSheet) {\n      s = s || '';\n      var mql, stsh;\n      if (listOrSheet.type === 'mediaQueryList') {\n        mql = listOrSheet;\n      } else {\n        stsh = listOrSheet;\n      }\n      var not = false,\n          type;\n      var expr = [];\n      var valid = true;\n      var tokens = s.match(regExp.NOT_WHITESPACE);\n\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i];\n        if (!type && (token === 'not' || token === 'only')) {\n          // 'not' and 'only' keywords\n          // keyword 'only' does nothing, as if it was not present\n          if (token === 'not') {\n            not = true;\n          }\n        } else if (!type) {\n          // media type\n          type = token;\n        } else if (token.charAt(0) === '(') {\n          // media feature expression\n          var pair = token.substring(1, token.length - 1).split(':');\n          expr[expr.length] = {\n            mediaFeature: pair[0],\n            value: pair[1] || null\n          };\n        }\n      }\n\n      return {\n        getQueryText: function getQueryText() {\n          return s;\n        },\n        getAttrStyleSheet: function getAttrStyleSheet() {\n          return stsh || null;\n        },\n        getList: function getList() {\n          return mql || null;\n        },\n        getValid: function getValid() {\n          return valid;\n        },\n        getNot: function getNot() {\n          return not;\n        },\n        getMediaType: function getMediaType() {\n          return type;\n        },\n        getExpressions: function getExpressions() {\n          return expr;\n        }\n      };\n    },\n\n    rule: function rule(s, stsh, mql) {\n      var o = {};\n      var idx = s.indexOf('{');\n      var st = s.substring(0, idx);\n      var ss = st.split(',');\n      var ds = [];\n      var dts = s.substring(idx + 1, s.length - 1).split(';');\n      for (var i = 0; i < dts.length; i++) {\n        ds[ds.length] = objects.declaration(dts[i], o);\n      }\n\n      o.getStylesheet = function () {\n        return stsh || null;\n      };\n      o.getMediaQueryList = function () {\n        return mql || null;\n      };\n      o.getSelectors = function () {\n        return ss;\n      };\n      o.getSelectorText = function () {\n        return st;\n      };\n      o.getDeclarations = function () {\n        return ds;\n      };\n      o.getPropertyValue = function (n) {\n        for (var i = 0; i < ds.length; i++) {\n          if (ds[i].getProperty() === n) {\n            return ds[i].getValue();\n          }\n        }\n        return null;\n      };\n      return o;\n    },\n\n    declaration: function declaration(s, r) {\n      var idx = s.indexOf(':');\n      var p = s.substring(0, idx);\n      var v = s.substring(idx + 1);\n      return {\n        getRule: function getRule() {\n          return r || null;\n        },\n        getProperty: function getProperty() {\n          return p;\n        },\n        getValue: function getValue() {\n          return v;\n        }\n      };\n    }\n  };\n\n  var parseText = function parseText(el) {\n    if (typeof el.cssHelperText !== 'string') {\n      return;\n    }\n    var o = {\n      stylesheet: null,\n      mediaQueryLists: [],\n      rules: [],\n      selectors: {},\n      declarations: [],\n      properties: {}\n    };\n\n    // build stylesheet object\n    var stsh = o.stylesheet = objects.stylesheet(el);\n\n    // collect media query lists\n    var mqls = o.mediaQueryLists = stsh.getMediaQueryLists();\n\n    // collect all rules\n    var ors = o.rules = stsh.getRules();\n\n    // collect all selectors\n    var oss = o.selectors;\n    var collectSelectors = function collectSelectors(r) {\n      var ss = r.getSelectors();\n      for (var i = 0; i < ss.length; i++) {\n        var n = ss[i];\n        if (!oss[n]) {\n          oss[n] = [];\n        }\n        oss[n][oss[n].length] = r;\n      }\n    };\n    for (i = 0; i < ors.length; i++) {\n      collectSelectors(ors[i]);\n    }\n\n    // collect all declarations\n    var ods = o.declarations;\n    for (i = 0; i < ors.length; i++) {\n      ods = o.declarations = ods.concat(ors[i].getDeclarations());\n    }\n\n    // collect all properties\n    var ops = o.properties;\n    for (i = 0; i < ods.length; i++) {\n      var n = ods[i].getProperty();\n      if (!ops[n]) {\n        ops[n] = [];\n      }\n      ops[n][ops[n].length] = ods[i];\n    }\n\n    el.cssHelperParsed = o;\n    _parsed[_parsed.length] = el;\n    return o;\n  };\n\n  var parseEmbedded = function parseEmbedded(el, s) {\n    return;\n    // This function doesn't work because of a bug in IE, where innerHTML gives us parsed css instead of raw literal.\n    el.cssHelperText = sanitize(s || el.innerHTML);\n    return parseText(el);\n  };\n\n  var parse = function parse() {\n    parsing = true;\n    _parsed = [];\n    var linked = [];\n    var finish = function finish() {\n      for (var i = 0; i < linked.length; i++) {\n        parseText(linked[i]);\n      }\n      var styles = document.getElementsByTagName('style');\n      for (i = 0; i < styles.length; i++) {\n        parseEmbedded(styles[i]);\n      }\n      parsing = false;\n      ready();\n    };\n    var links = document.getElementsByTagName('link');\n    for (var i = 0; i < links.length; i++) {\n      var link = links[i];\n      if (link.getAttribute('rel').indexOf('style') > -1 && link.href && link.href.length !== 0 && !link.disabled) {\n        linked[linked.length] = link;\n      }\n    }\n    if (linked.length > 0) {\n      var c = 0;\n      var checkForFinish = function checkForFinish() {\n        c++;\n        if (c === linked.length) {\n          // parse in right order, so after last link is read\n          finish();\n        }\n      };\n      var processLink = function processLink(link) {\n        var href = link.href;\n        requestText(href, function (text) {\n          // fix url's\n          text = sanitize(text).replace(regExp.RELATIVE_URLS, 'url(' + href.substring(0, href.lastIndexOf('/')) + '/$1)');\n          link.cssHelperText = text;\n          checkForFinish();\n        }, checkForFinish);\n      };\n      for (i = 0; i < linked.length; i++) {\n        processLink(linked[i]);\n      }\n    } else {\n      finish();\n    }\n  };\n\n  var types = {\n    stylesheets: 'array',\n    mediaQueryLists: 'array',\n    rules: 'array',\n    selectors: 'object',\n    declarations: 'array',\n    properties: 'object'\n  };\n\n  var collections = {\n    stylesheets: null,\n    mediaQueryLists: null,\n    rules: null,\n    selectors: null,\n    declarations: null,\n    properties: null\n  };\n\n  var addToCollection = function addToCollection(name, v) {\n    if (collections[name] !== null) {\n      if (types[name] === 'array') {\n        return collections[name] = collections[name].concat(v);\n      } else {\n        var c = collections[name];\n        for (var n in v) {\n          if (v.hasOwnProperty(n)) {\n            if (!c[n]) {\n              c[n] = v[n];\n            } else {\n              c[n] = c[n].concat(v[n]);\n            }\n          }\n        }\n        return c;\n      }\n    }\n  };\n\n  var collect = function collect(name) {\n    collections[name] = types[name] === 'array' ? [] : {};\n    for (var i = 0; i < _parsed.length; i++) {\n      var pname = name === 'stylesheets' ? 'stylesheet' : name; // the exception\n      addToCollection(name, _parsed[i].cssHelperParsed[pname]);\n    }\n    return collections[name];\n  };\n\n  // viewport size\n  var getViewportSize = function getViewportSize(d) {\n    if (typeof window.innerWidth != 'undefined') {\n      return window['inner' + d];\n    } else if (typeof document.documentElement !== 'undefined' && typeof document.documentElement.clientWidth !== 'undefined' && document.documentElement.clientWidth != 0) {\n      return document.documentElement['client' + d];\n    }\n  };\n\n  // public static functions\n  return {\n    addStyle: function addStyle(s, mediaTypes, process) {\n      var el;\n      var styleElId = 'css-mediaqueries-js';\n      var styleMedia = '';\n\n      var styleEl = document.getElementById(styleElId);\n\n      if (mediaTypes && mediaTypes.length > 0) {\n        styleMedia = mediaTypes.join(',');\n        styleElId += styleMedia;\n      }\n\n      if (null !== styleEl) {\n        el = styleEl;\n      } else {\n        el = document.createElement('style');\n        el.setAttribute('type', 'text/css');\n        el.setAttribute('id', styleElId);\n        el.setAttribute('media', styleMedia);\n        document.getElementsByTagName('head')[0].appendChild(el);\n      }\n\n      if (el.styleSheet) {\n        // IE\n        el.styleSheet.cssText += s;\n      } else {\n        el.appendChild(document.createTextNode(s));\n      }\n\n      el.addedWithCssHelper = true;\n\n      if (typeof process === 'undefined' || process === true) {\n        cssHelper.parsed(function (parsed) {\n          var o = parseEmbedded(el, s);\n          for (var n in o) {\n            if (o.hasOwnProperty(n)) {\n              addToCollection(n, o[n]);\n            }\n          }\n          broadcast('newStyleParsed', el);\n        });\n      } else {\n        el.parsingDisallowed = true;\n      }\n      return el;\n    },\n\n    removeStyle: function removeStyle(el) {\n      if (el.parentNode) return el.parentNode.removeChild(el);\n    },\n\n    parsed: function parsed(fn) {\n      if (parsing) {\n        wait(fn);\n      } else {\n        if (typeof _parsed !== 'undefined') {\n          if (typeof fn === 'function') {\n            fn(_parsed);\n          }\n        } else {\n          wait(fn);\n          parse();\n        }\n      }\n    },\n\n    stylesheets: function stylesheets(fn) {\n      cssHelper.parsed(function (parsed) {\n        fn(collections.stylesheets || collect('stylesheets'));\n      });\n    },\n\n    mediaQueryLists: function mediaQueryLists(fn) {\n      cssHelper.parsed(function (parsed) {\n        fn(collections.mediaQueryLists || collect('mediaQueryLists'));\n      });\n    },\n\n    rules: function rules(fn) {\n      cssHelper.parsed(function (parsed) {\n        fn(collections.rules || collect('rules'));\n      });\n    },\n\n    selectors: function selectors(fn) {\n      cssHelper.parsed(function (parsed) {\n        fn(collections.selectors || collect('selectors'));\n      });\n    },\n\n    declarations: function declarations(fn) {\n      cssHelper.parsed(function (parsed) {\n        fn(collections.declarations || collect('declarations'));\n      });\n    },\n\n    properties: function properties(fn) {\n      cssHelper.parsed(function (parsed) {\n        fn(collections.properties || collect('properties'));\n      });\n    },\n\n    broadcast: broadcast,\n\n    addListener: function addListener(n, fn) {\n      // in case n is 'styleadd': added function is called everytime style is added and parsed\n      if (typeof fn === 'function') {\n        if (!events[n]) {\n          events[n] = {\n            listeners: []\n          };\n        }\n        events[n].listeners[events[n].listeners.length] = fn;\n      }\n    },\n\n    removeListener: function removeListener(n, fn) {\n      if (typeof fn === 'function' && events[n]) {\n        var ls = events[n].listeners;\n        for (var i = 0; i < ls.length; i++) {\n          if (ls[i] === fn) {\n            ls.splice(i, 1);\n            i -= 1;\n          }\n        }\n      }\n    },\n\n    getViewportWidth: function getViewportWidth() {\n      return getViewportSize('Width');\n    },\n\n    getViewportHeight: function getViewportHeight() {\n      return getViewportSize('Height');\n    }\n  };\n}();\n\n// function to test and apply parsed media queries against browser capabilities\ndomReady(function enableCssMediaQueries() {\n  var meter;\n\n  var regExp = {\n    LENGTH_UNIT: /[0-9]+(em|ex|px|in|cm|mm|pt|pc)$/,\n    RESOLUTION_UNIT: /[0-9]+(dpi|dpcm)$/,\n    ASPECT_RATIO: /^[0-9]+\\/[0-9]+$/,\n    ABSOLUTE_VALUE: /^[0-9]*(\\.[0-9]+)*$/\n  };\n\n  var styles = [];\n\n  var _nativeSupport = function nativeSupport() {\n    // check support for media queries\n    var id = 'css3-mediaqueries-test';\n    var el = document.createElement('div');\n    el.id = id;\n    var style = cssHelper.addStyle('@media all and (width) { #' + id + ' { width: 1px !important; } }', [], false); // false means don't parse this temp style\n    document.body.appendChild(el);\n    var ret = el.offsetWidth === 1;\n    style.parentNode.removeChild(style);\n    el.parentNode.removeChild(el);\n    _nativeSupport = function nativeSupport() {\n      return ret;\n    };\n    return ret;\n  };\n\n  var createMeter = function createMeter() {\n    // create measuring element\n    meter = document.createElement('div');\n    meter.style.cssText = 'position:absolute;top:-9999em;left:-9999em;' + 'margin:0;border:none;padding:0;width:1em;font-size:1em;'; // cssText is needed for IE, works for the others\n    document.body.appendChild(meter);\n    // meter must have browser default font size of 16px\n    if (meter.offsetWidth !== 16) {\n      meter.style.fontSize = 16 / meter.offsetWidth + 'em';\n    }\n    meter.style.width = '';\n  };\n\n  var measure = function measure(value) {\n    meter.style.width = value;\n    var amount = meter.offsetWidth;\n    meter.style.width = '';\n    return amount;\n  };\n\n  var testMediaFeature = function testMediaFeature(feature, value) {\n    // non-testable features: monochrome|min-monochrome|max-monochrome|scan|grid\n    var l = feature.length;\n    var min = feature.substring(0, 4) === 'min-';\n    var max = !min && feature.substring(0, 4) === 'max-';\n\n    if (value !== null) {\n      // determine value type and parse to usable amount\n      var valueType;\n      var amount;\n      if (regExp.LENGTH_UNIT.exec(value)) {\n        valueType = 'length';\n        amount = measure(value);\n      } else if (regExp.RESOLUTION_UNIT.exec(value)) {\n        valueType = 'resolution';\n        amount = parseInt(value, 10);\n        var unit = value.substring((amount + '').length);\n      } else if (regExp.ASPECT_RATIO.exec(value)) {\n        valueType = 'aspect-ratio';\n        amount = value.split('/');\n      } else if (regExp.ABSOLUTE_VALUE) {\n        valueType = 'absolute';\n        amount = value;\n      } else {\n        valueType = 'unknown';\n      }\n    }\n\n    var width, height;\n    if ('device-width' === feature.substring(l - 12, l)) {\n      // screen width\n      width = screen.width;\n      if (value !== null) {\n        if (valueType === 'length') {\n          return min && width >= amount || max && width < amount || !min && !max && width === amount;\n        } else {\n          return false;\n        }\n      } else {\n        // test width without value\n        return width > 0;\n      }\n    } else if ('device-height' === feature.substring(l - 13, l)) {\n      // screen height\n      height = screen.height;\n      if (value !== null) {\n        if (valueType === 'length') {\n          return min && height >= amount || max && height < amount || !min && !max && height === amount;\n        } else {\n          return false;\n        }\n      } else {\n        // test height without value\n        return height > 0;\n      }\n    } else if ('width' === feature.substring(l - 5, l)) {\n      // viewport width\n      width = document.documentElement.clientWidth || document.body.clientWidth; // the latter for IE quirks mode\n      if (value !== null) {\n        if (valueType === 'length') {\n          return min && width >= amount || max && width < amount || !min && !max && width === amount;\n        } else {\n          return false;\n        }\n      } else {\n        // test width without value\n        return width > 0;\n      }\n    } else if ('height' === feature.substring(l - 6, l)) {\n      // viewport height\n      height = document.documentElement.clientHeight || document.body.clientHeight; // the latter for IE quirks mode\n      if (value !== null) {\n        if (valueType === 'length') {\n          return min && height >= amount || max && height < amount || !min && !max && height === amount;\n        } else {\n          return false;\n        }\n      } else {\n        // test height without value\n        return height > 0;\n      }\n    } else if ('orientation' === feature.substring(l - 11, l)) {\n      // orientation\n\n      width = document.documentElement.clientWidth || document.body.clientWidth; // the latter for IE quirks mode\n      height = document.documentElement.clientHeight || document.body.clientHeight; // the latter for IE quirks mode\n\n      if (valueType === 'absolute') {\n        return amount === 'portrait' ? width <= height : width > height;\n      } else {\n        return false;\n      }\n    } else if ('aspect-ratio' === feature.substring(l - 12, l)) {\n      // window aspect ratio\n      width = document.documentElement.clientWidth || document.body.clientWidth; // the latter for IE quirks mode\n      height = document.documentElement.clientHeight || document.body.clientHeight; // the latter for IE quirks mode\n\n      var curRatio = width / height;\n      var ratio = amount[1] / amount[0];\n\n      if (valueType === 'aspect-ratio') {\n        return min && curRatio >= ratio || max && curRatio < ratio || !min && !max && curRatio === ratio;\n      } else {\n        return false;\n      }\n    } else if ('device-aspect-ratio' === feature.substring(l - 19, l)) {\n      // screen aspect ratio\n      return valueType === 'aspect-ratio' && screen.width * amount[1] === screen.height * amount[0];\n    } else if ('color-index' === feature.substring(l - 11, l)) {\n      // number of colors\n      var colors = Math.pow(2, screen.colorDepth);\n      if (value !== null) {\n        if (valueType === 'absolute') {\n          return min && colors >= amount || max && colors < amount || !min && !max && colors === amount;\n        } else {\n          return false;\n        }\n      } else {\n        // test height without value\n        return colors > 0;\n      }\n    } else if ('color' === feature.substring(l - 5, l)) {\n      // bits per color component\n      var color = screen.colorDepth;\n      if (value !== null) {\n        if (valueType === 'absolute') {\n          return min && color >= amount || max && color < amount || !min && !max && color === amount;\n        } else {\n          return false;\n        }\n      } else {\n        // test height without value\n        return color > 0;\n      }\n    } else if ('resolution' === feature.substring(l - 10, l)) {\n      var res;\n      if (unit === 'dpcm') {\n        res = measure('1cm');\n      } else {\n        res = measure('1in');\n      }\n      if (value !== null) {\n        if (valueType === 'resolution') {\n          return min && res >= amount || max && res < amount || !min && !max && res === amount;\n        } else {\n          return false;\n        }\n      } else {\n        // test height without value\n        return res > 0;\n      }\n    } else {\n      return false;\n    }\n  };\n\n  var testMediaQuery = function testMediaQuery(mq) {\n    var test = mq.getValid();\n    var expressions = mq.getExpressions();\n    var l = expressions.length;\n    if (l > 0) {\n      for (var i = 0; i < l && test; i++) {\n        test = testMediaFeature(expressions[i].mediaFeature, expressions[i].value);\n      }\n      var not = mq.getNot();\n      return test && !not || not && !test;\n    }\n    return test;\n  };\n\n  var testMediaQueryList = function testMediaQueryList(mql, ts) {\n    // ts is null or an array with any media type but 'all'.\n    var mqs = mql.getMediaQueries();\n    var t = {};\n    for (var i = 0; i < mqs.length; i++) {\n      var type = mqs[i].getMediaType();\n      if (mqs[i].getExpressions().length === 0) {\n        continue;\n        // TODO: Browser check! Assuming old browsers do apply the bare media types, even in a list with media queries.\n      }\n      var typeAllowed = true;\n      if (type !== 'all' && ts && ts.length > 0) {\n        typeAllowed = false;\n        for (var j = 0; j < ts.length; j++) {\n          if (ts[j] === type) {\n            typeAllowed = true;\n          }\n        }\n      }\n      if (typeAllowed && testMediaQuery(mqs[i])) {\n        t[type] = true;\n      }\n    }\n    var s = [],\n        c = 0;\n    for (var n in t) {\n      if (t.hasOwnProperty(n)) {\n        if (c > 0) {\n          s[c++] = ',';\n        }\n        s[c++] = n;\n      }\n    }\n    if (s.length > 0) {\n      styles[styles.length] = cssHelper.addStyle('@media ' + s.join('') + '{' + mql.getCssText() + '}', ts, false);\n    }\n  };\n\n  var testMediaQueryLists = function testMediaQueryLists(mqls, ts) {\n    for (var i = 0; i < mqls.length; i++) {\n      testMediaQueryList(mqls[i], ts);\n    }\n  };\n\n  var testStylesheet = function testStylesheet(stsh) {\n    var amqs = stsh.getAttrMediaQueries();\n    var allPassed = false;\n    var t = {};\n    for (var i = 0; i < amqs.length; i++) {\n      if (testMediaQuery(amqs[i])) {\n        t[amqs[i].getMediaType()] = amqs[i].getExpressions().length > 0;\n      }\n    }\n    var ts = [],\n        tswe = [];\n    for (var n in t) {\n      if (t.hasOwnProperty(n)) {\n        ts[ts.length] = n;\n        if (t[n]) {\n          tswe[tswe.length] = n;\n        }\n        if (n === 'all') {\n          allPassed = true;\n        }\n      }\n    }\n    if (tswe.length > 0) {\n      // types with query expressions that passed the test\n      styles[styles.length] = cssHelper.addStyle(stsh.getCssText(), tswe, false);\n    }\n    var mqls = stsh.getMediaQueryLists();\n    if (allPassed) {\n      // If 'all' in media attribute passed the test, then test all @media types in linked CSS and create style with those types.\n      testMediaQueryLists(mqls);\n    } else {\n      // Or else, test only media attribute types that passed the test and also 'all'.\n      // For positive '@media all', create style with attribute types that passed their test.\n      testMediaQueryLists(mqls, ts);\n    }\n  };\n\n  var testStylesheets = function testStylesheets(stshs) {\n    for (var i = 0; i < stshs.length; i++) {\n      testStylesheet(stshs[i]);\n    }\n    if (ua.ie) {\n      // force repaint in IE\n      document.documentElement.style.display = 'block';\n      setTimeout(function () {\n        document.documentElement.style.display = '';\n      }, 0);\n      // delay broadcast somewhat for IE\n      setTimeout(function () {\n        cssHelper.broadcast('cssMediaQueriesTested');\n      }, 100);\n    } else {\n      cssHelper.broadcast('cssMediaQueriesTested');\n    }\n  };\n\n  var test = function test() {\n    for (var i = 0; i < styles.length; i++) {\n      cssHelper.removeStyle(styles[i]);\n    }\n    styles = [];\n    cssHelper.stylesheets(testStylesheets);\n  };\n\n  var scrollbarWidth = 0;\n  var checkForResize = function checkForResize() {\n    var cvpw = cssHelper.getViewportWidth();\n    var cvph = cssHelper.getViewportHeight();\n\n    // determine scrollbar width in IE, see resizeHandler\n    if (ua.ie) {\n      var el = document.createElement('div');\n      el.style.position = 'absolute';\n      el.style.top = '-9999em';\n      el.style.overflow = 'scroll';\n      document.body.appendChild(el);\n      scrollbarWidth = el.offsetWidth - el.clientWidth;\n      document.body.removeChild(el);\n    }\n\n    var timer;\n    var resizeHandler = function resizeHandler() {\n      var vpw = cssHelper.getViewportWidth();\n      var vph = cssHelper.getViewportHeight();\n      // check whether vp size has really changed, because IE also triggers resize event when body size changes\n      // 20px allowance to accomodate short appearance of scrollbars in IE in some cases\n      if (Math.abs(vpw - cvpw) > scrollbarWidth || Math.abs(vph - cvph) > scrollbarWidth) {\n        cvpw = vpw;\n        cvph = vph;\n        clearTimeout(timer);\n        timer = setTimeout(function () {\n          if (!_nativeSupport()) {\n            test();\n          } else {\n            cssHelper.broadcast('cssMediaQueriesTested');\n          }\n        }, 500);\n      }\n    };\n\n    window.onresize = function () {\n      var x = window.onresize || function () {}; // save original\n      return function () {\n        x();\n        resizeHandler();\n      };\n    }();\n  };\n\n  // prevent jumping of layout by hiding everything before painting <body>\n  var docEl = document.documentElement;\n  docEl.style.marginLeft = '-32767px';\n\n  // make sure it comes back after a while\n  setTimeout(function () {\n    docEl.style.marginLeft = '';\n  }, 5000);\n\n  return function () {\n    if (!_nativeSupport()) {\n      // if browser doesn't support media queries\n      cssHelper.addListener('newStyleParsed', function (el) {\n        testStylesheet(el.cssHelperParsed.stylesheet);\n      });\n      // return visibility after media queries are tested\n      cssHelper.addListener('cssMediaQueriesTested', function () {\n        // force repaint in IE by changing width\n        if (ua.ie) {\n          docEl.style.width = '1px';\n        }\n        setTimeout(function () {\n          docEl.style.width = ''; // undo width\n          docEl.style.marginLeft = ''; // undo hide\n        }, 0);\n        // remove this listener to prevent following execution\n        cssHelper.removeListener('cssMediaQueriesTested', arguments.callee);\n      });\n      createMeter();\n      test();\n    } else {\n      docEl.style.marginLeft = ''; // undo visibility hidden\n    }\n    checkForResize();\n  };\n}());\n\n// bonus: hotfix for IE6 SP1 (bug KB823727)\ntry {\n  document.execCommand('BackgroundImageCache', false, true);\n} catch (e) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///305\n");

/***/ }),

/***/ 306:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n    json2.js\n    2011-10-19\n\n    Public Domain.\n\n    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\n    See http://www.JSON.org/js.html\n\n\n    This code should be minified before deployment.\n    See http://javascript.crockford.com/jsmin.html\n\n    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\n    NOT CONTROL.\n\n\n    This file creates a global JSON object containing two methods: stringify\n    and parse.\n\n        JSON.stringify(value, replacer, space)\n            value       any JavaScript value, usually an object or array.\n\n            replacer    an optional parameter that determines how object\n                        values are stringified for objects. It can be a\n                        function or an array of strings.\n\n            space       an optional parameter that specifies the indentation\n                        of nested structures. If it is omitted, the text will\n                        be packed without extra whitespace. If it is a number,\n                        it will specify the number of spaces to indent at each\n                        level. If it is a string (such as '\\t' or '&nbsp;'),\n                        it contains the characters used to indent at each level.\n\n            This method produces a JSON text from a JavaScript value.\n\n            When an object value is found, if the object contains a toJSON\n            method, its toJSON method will be called and the result will be\n            stringified. A toJSON method does not serialize: it returns the\n            value represented by the name/value pair that should be serialized,\n            or undefined if nothing should be serialized. The toJSON method\n            will be passed the key associated with the value, and this will be\n            bound to the value\n\n            For example, this would serialize Dates as ISO strings.\n\n                Date.prototype.toJSON = function (key) {\n                    function f(n) {\n                        // Format integers to have at least two digits.\n                        return n < 10 ? '0' + n : n;\n                    }\n\n                    return this.getUTCFullYear()   + '-' +\n                         f(this.getUTCMonth() + 1) + '-' +\n                         f(this.getUTCDate())      + 'T' +\n                         f(this.getUTCHours())     + ':' +\n                         f(this.getUTCMinutes())   + ':' +\n                         f(this.getUTCSeconds())   + 'Z';\n                };\n\n            You can provide an optional replacer method. It will be passed the\n            key and value of each member, with this bound to the containing\n            object. The value that is returned from your method will be\n            serialized. If your method returns undefined, then the member will\n            be excluded from the serialization.\n\n            If the replacer parameter is an array of strings, then it will be\n            used to select the members to be serialized. It filters the results\n            such that only members with keys listed in the replacer array are\n            stringified.\n\n            Values that do not have JSON representations, such as undefined or\n            functions, will not be serialized. Such values in objects will be\n            dropped; in arrays they will be replaced with null. You can use\n            a replacer function to replace those with JSON values.\n            JSON.stringify(undefined) returns undefined.\n\n            The optional space parameter produces a stringification of the\n            value that is filled with line breaks and indentation to make it\n            easier to read.\n\n            If the space parameter is a non-empty string, then that string will\n            be used for indentation. If the space parameter is a number, then\n            the indentation will be that many spaces.\n\n            Example:\n\n            text = JSON.stringify(['e', {pluribus: 'unum'}]);\n            // text is '[\"e\",{\"pluribus\":\"unum\"}]'\n\n\n            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\\t');\n            // text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'\n\n            text = JSON.stringify([new Date()], function (key, value) {\n                return this[key] instanceof Date ?\n                    'Date(' + this[key] + ')' : value;\n            });\n            // text is '[\"Date(---current time---)\"]'\n\n\n        JSON.parse(text, reviver)\n            This method parses a JSON text to produce an object or array.\n            It can throw a SyntaxError exception.\n\n            The optional reviver parameter is a function that can filter and\n            transform the results. It receives each of the keys and values,\n            and its return value is used instead of the original value.\n            If it returns what it received, then the structure is not modified.\n            If it returns undefined then the member is deleted.\n\n            Example:\n\n            // Parse the text. Values that look like ISO date strings will\n            // be converted to Date objects.\n\n            myData = JSON.parse(text, function (key, value) {\n                var a;\n                if (typeof value === 'string') {\n                    a =\n/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n                    if (a) {\n                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],\n                            +a[5], +a[6]));\n                    }\n                }\n                return value;\n            });\n\n            myData = JSON.parse('[\"Date(09/09/2001)\"]', function (key, value) {\n                var d;\n                if (typeof value === 'string' &&\n                        value.slice(0, 5) === 'Date(' &&\n                        value.slice(-1) === ')') {\n                    d = new Date(value.slice(5, -1));\n                    if (d) {\n                        return d;\n                    }\n                }\n                return value;\n            });\n\n\n    This is a reference implementation. You are free to copy, modify, or\n    redistribute.\n*/\n\n/*jslint evil: true, regexp: true */\n\n/*members \"\", \"\\b\", \"\\t\", \"\\n\", \"\\f\", \"\\r\", \"\\\"\", JSON, \"\\\\\", apply,\n    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\n    test, toJSON, toString, valueOf\n*/\n\n// Create a JSON object only if one does not already exist. We create the\n// methods in a closure to avoid creating global variables.\n\nvar JSON;\nif (!JSON) {\n  JSON = {};\n}\n\n(function () {\n  'use strict';\n\n  function f(n) {\n    // Format integers to have at least two digits.\n    return n < 10 ? '0' + n : n;\n  }\n\n  if (typeof Date.prototype.toJSON !== 'function') {\n    Date.prototype.toJSON = function (key) {\n      return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null;\n    };\n\n    String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) {\n      return this.valueOf();\n    };\n  }\n\n  var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n      escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n      gap,\n      indent,\n      meta = {\n    // table of character substitutions\n    '\\b': '\\\\b',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\f': '\\\\f',\n    '\\r': '\\\\r',\n    '\"': '\\\\\"',\n    '\\\\': '\\\\\\\\'\n  },\n      rep;\n\n  function quote(string) {\n    // If the string contains no control characters, no quote characters, and no\n    // backslash characters, then we can safely slap some quotes around it.\n    // Otherwise we must also replace the offending characters with safe escape\n    // sequences.\n\n    escapable.lastIndex = 0;\n    return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n      var c = meta[a];\n      return typeof c === 'string' ? c : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n    }) + '\"' : '\"' + string + '\"';\n  }\n\n  function str(key, holder) {\n    // Produce a string from holder[key].\n\n    var i,\n        // The loop counter.\n    k,\n        // The member key.\n    v,\n        // The member value.\n    length,\n        mind = gap,\n        partial,\n        value = holder[key];\n\n    // If the value has a toJSON method, call it to obtain a replacement value.\n\n    if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.toJSON === 'function') {\n      value = value.toJSON(key);\n    }\n\n    // If we were called with a replacer function, then call the replacer to\n    // obtain a replacement value.\n\n    if (typeof rep === 'function') {\n      value = rep.call(holder, key, value);\n    }\n\n    // What happens next depends on the value's type.\n\n    switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n      case 'string':\n        return quote(value);\n\n      case 'number':\n        // JSON numbers must be finite. Encode non-finite numbers as null.\n\n        return isFinite(value) ? String(value) : 'null';\n\n      case 'boolean':\n      case 'null':\n        // If the value is a boolean or null, convert it to a string. Note:\n        // typeof null does not produce 'null'. The case is included here in\n        // the remote chance that this gets fixed someday.\n\n        return String(value);\n\n      // If the type is 'object', we might be dealing with an object or an array or\n      // null.\n\n      case 'object':\n        // Due to a specification blunder in ECMAScript, typeof null is 'object',\n        // so watch out for that case.\n\n        if (!value) {\n          return 'null';\n        }\n\n        // Make an array to hold the partial results of stringifying this object value.\n\n        gap += indent;\n        partial = [];\n\n        // Is the value an array?\n\n        if (Object.prototype.toString.apply(value) === '[object Array]') {\n          // The value is an array. Stringify every element. Use null as a placeholder\n          // for non-JSON values.\n\n          length = value.length;\n          for (i = 0; i < length; i += 1) {\n            partial[i] = str(i, value) || 'null';\n          }\n\n          // Join all of the elements together, separated with commas, and wrap them in\n          // brackets.\n\n          v = partial.length === 0 ? '[]' : gap ? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' : '[' + partial.join(',') + ']';\n          gap = mind;\n          return v;\n        }\n\n        // If the replacer is an array, use it to select the members to be stringified.\n\n        if (rep && (typeof rep === 'undefined' ? 'undefined' : _typeof(rep)) === 'object') {\n          length = rep.length;\n          for (i = 0; i < length; i += 1) {\n            if (typeof rep[i] === 'string') {\n              k = rep[i];\n              v = str(k, value);\n              if (v) {\n                partial.push(quote(k) + (gap ? ': ' : ':') + v);\n              }\n            }\n          }\n        } else {\n          // Otherwise, iterate through all of the keys in the object.\n\n          for (k in value) {\n            if (Object.prototype.hasOwnProperty.call(value, k)) {\n              v = str(k, value);\n              if (v) {\n                partial.push(quote(k) + (gap ? ': ' : ':') + v);\n              }\n            }\n          }\n        }\n\n        // Join all of the member texts together, separated with commas,\n        // and wrap them in braces.\n\n        v = partial.length === 0 ? '{}' : gap ? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' : '{' + partial.join(',') + '}';\n        gap = mind;\n        return v;\n    }\n  }\n\n  // If the JSON object does not yet have a stringify method, give it one.\n\n  if (typeof JSON.stringify !== 'function') {\n    JSON.stringify = function (value, replacer, space) {\n      // The stringify method takes a value and an optional replacer, and an optional\n      // space parameter, and returns a JSON text. The replacer can be a function\n      // that can replace values, or an array of strings that will select the keys.\n      // A default replacer method can be provided. Use of the space parameter can\n      // produce text that is more easily readable.\n\n      var i;\n      gap = '';\n      indent = '';\n\n      // If the space parameter is a number, make an indent string containing that\n      // many spaces.\n\n      if (typeof space === 'number') {\n        for (i = 0; i < space; i += 1) {\n          indent += ' ';\n        }\n\n        // If the space parameter is a string, it will be used as the indent string.\n      } else if (typeof space === 'string') {\n        indent = space;\n      }\n\n      // If there is a replacer, it must be a function or an array.\n      // Otherwise, throw an error.\n\n      rep = replacer;\n      if (replacer && typeof replacer !== 'function' && ((typeof replacer === 'undefined' ? 'undefined' : _typeof(replacer)) !== 'object' || typeof replacer.length !== 'number')) {\n        throw new Error('JSON.stringify');\n      }\n\n      // Make a fake root object containing our value under the key of ''.\n      // Return the result of stringifying the value.\n\n      return str('', { '': value });\n    };\n  }\n\n  // If the JSON object does not yet have a parse method, give it one.\n\n  if (typeof JSON.parse !== 'function') {\n    JSON.parse = function (text, reviver) {\n      // The parse method takes a text and an optional reviver function, and returns\n      // a JavaScript value if the text is a valid JSON text.\n\n      var j;\n\n      function walk(holder, key) {\n        // The walk method is used to recursively walk the resulting structure so\n        // that modifications can be made.\n\n        var k,\n            v,\n            value = holder[key];\n        if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n          for (k in value) {\n            if (Object.prototype.hasOwnProperty.call(value, k)) {\n              v = walk(value, k);\n              if (v !== undefined) {\n                value[k] = v;\n              } else {\n                delete value[k];\n              }\n            }\n          }\n        }\n        return reviver.call(holder, key, value);\n      }\n\n      // Parsing happens in four stages. In the first stage, we replace certain\n      // Unicode characters with escape sequences. JavaScript handles many characters\n      // incorrectly, either silently deleting them, or treating them as line endings.\n\n      text = String(text);\n      cx.lastIndex = 0;\n      if (cx.test(text)) {\n        text = text.replace(cx, function (a) {\n          return '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n        });\n      }\n\n      // In the second stage, we run the text against regular expressions that look\n      // for non-JSON patterns. We are especially concerned with '()' and 'new'\n      // because they can cause invocation, and '=' because it can cause mutation.\n      // But just to be safe, we want to reject all unexpected forms.\n\n      // We split the second stage into 4 regexp operations in order to work around\n      // crippling inefficiencies in IE's and Safari's regexp engines. First we\n      // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we\n      // replace all simple value tokens with ']' characters. Third, we delete all\n      // open brackets that follow a colon or comma or that begin the text. Finally,\n      // we look to see that the remaining characters are only whitespace or ']' or\n      // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\n      if (/^[\\],:{}\\s]*$/.test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n        // In the third stage we use the eval function to compile the text into a\n        // JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n        // in JavaScript: it can begin a block or an object literal. We wrap the text\n        // in parens to eliminate the ambiguity.\n\n        j = eval('(' + text + ')');\n\n        // In the optional fourth stage, we recursively walk the new structure, passing\n        // each name/value pair to a reviver function for possible transformation.\n\n        return typeof reviver === 'function' ? walk({ '': j }, '') : j;\n      }\n\n      // If the text is not JSON parseable, then a SyntaxError is thrown.\n\n      throw new SyntaxError('JSON.parse');\n    };\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///306\n");

/***/ })

/******/ });